@page "/addnote/{patId:int}"
@using System.Net.Http
@using System.Net.Http.Json
@using MongoDB.Bson.Serialization.Attributes;
@using MongoDB.Bson;
@inject HttpClient Http
@inject NavigationManager Navigation
@attribute [Authorize]

<h3>Add Note</h3>

<EditForm Model="noteModel" OnValidSubmit="HandleAddNote">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="patId">PatId:</label>
        <InputText id="patId" @bind-Value="noteModel.PatId" Disabled="true" />
    </div>
    <div>
        <label for="patient">Patient:</label>
        <InputText id="patient" @bind-Value="noteModel.Patient" Disabled="true" />
    </div>
    <div>
        <label for="note">Note:</label>
        <InputTextArea id="note" @bind-Value="noteModel.Note" />
    </div>
    <button type="submit">Ajouter Une Note</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}

@code {
    private PatientNote noteModel = new PatientNote();
    private string errorMessage;
    private string successMessage;

    private async Task HandleAddNote()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("/api/PatientNotes/Create", noteModel);
            if (response.IsSuccessStatusCode)
            {
                successMessage = "Note added successfully.";
                errorMessage = string.Empty;
                Navigation.NavigateTo($"/patientnotes/{patId}");
            }
            else
            {
                errorMessage = "Failed to add note. Please try again.";
                successMessage = string.Empty;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            successMessage = string.Empty;
        }
    }
    private Patient patient;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            patient = await Http.GetFromJsonAsync<Patient>($"api/Patient/Find/{patId}");
            if (patient != null)
            {
                noteModel.PatId = patId.ToString();
                noteModel.Patient = patient.LastName;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    public class Patient
    {
        public int Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public DateTime DateOfBirth { get; set; }
        public string Gender { get; set; }
        public string Address { get; set; } = string.Empty;
        public string PhoneNumber { get; set; } = string.Empty;
    }

    public class PatientNote
    {
        [BsonRepresentation(BsonType.ObjectId)]
        public string Id { get; set; } = ObjectId.GenerateNewId().ToString();
        public string PatId { get; set; } = null!;
        public string Patient { get; set; } = null!;
        public string Note { get; set; } = null!;
    }
    [Parameter]
    public int patId { get; set; }
}